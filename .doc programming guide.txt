Hierachy | + = pasta | - = pasta acessada 

+ Chessboard 

	script: Board.cs 

	O script Board.cs : Controla o tabuleiro do jogo de xadrez e gerencia as peças e movimentos.

	public static Board instance;: Define uma instância estática da classe Board para facilitar o acesso a partir de outros scripts.
	public Dictionary<Vector2Int, Tile> tiles = new Dictionary<Vector2Int, Tile>();: Cria um dicionário que mapeia as posições no tabuleiro para os objetos Tile correspondentes.
	public Transform goldHolder{get{return StateMachineController.instance.player1.transform;}}: Obtém o transform do jogador 1 do StateMachineController.
	public Transform greenHolder{get{return StateMachineController.instance.player2.transform;}}: Obtém o transform do jogador 2 do StateMachineController.
	public List<Piece> goldPieces = new List<Piece>();: Lista de peças do jogador 1.
	public List<Piece> greenPieces = new List<Piece>();: Lista de peças do jogador 2.
	public Piece selectedPiece;: Peça selecionada atualmente.
	public AvailableMove selectedMove;: Movimento selecionado atualmente.


	void Awake() { instance = this; }: 
		//Define a instância atual como a instância estática quando o objeto é inicializado.


	public async Task Load(){GetTeams(); await Task.Run(() => CreateBoard()); } 
		//Método assíncrono para carregar o tabuleiro e as peças.
		GetTeams();: Este método é chamado para obter as equipes de peças dos jogadores. Adiciona as peças encontradas nos transformadores dos jogadores 1 e 2 às listas goldPieces e greenPieces.
		await Task.Run(() => CreateBoard());: Aqui, está sendo utilizado um método assíncrono para executar a criação do tabuleiro em uma tarefa separada. Isso é feito para evitar bloquear a thread principal da aplicação enquanto o tabuleiro é criado. A expressão () => CreateBoard() representa uma função lambda que chama o método CreateBoard() dentro de uma tarefa assíncrona.
		CreateBoard() representa uma função lambda que chama o método CreateBoard() dentro de uma tarefa assíncrona.
		Resumindo, o método Load() primeiro obtém as equipes de peças dos jogadores e, em seguida, cria o tabuleiro de forma assíncrona, utilizando uma tarefa separada para garantir a fluidez da execução do jogo.


	public void ResetBoard(){
          foreach(Tile t in tiles.Values){
              t.content = null;
          }
          foreach(Piece p in goldPieces){
              ResetPiece(p);
          }
          foreach(Piece p in greenPieces){
              ResetPiece(p);
          }
        }
		//O método ResetBoard() é responsável por reiniciar o tabuleiro e todas as peças, removendo qualquer conteúdo presente nas casas (Tile) e restaurando as peças às suas posições iniciais.
		foreach(Tile t in tiles.Values) { t.content = null; }: Este loop foreach itera sobre todas as casas (Tile) presentes no dicionário tiles e define o conteúdo de cada casa como nulo, ou seja, remove qualquer peça que esteja ocupando a casa.
		foreach(Piece p in goldPieces) { ResetPiece(p); }: Este loop foreach itera sobre todas as peças da equipe de ouro (goldPieces) e chama o método ResetPiece(p) para cada peça. O objetivo é restaurar cada peça à sua posição inicial no tabuleiro.
		foreach(Piece p in greenPieces) { ResetPiece(p); }: Este loop foreach é semelhante ao anterior, mas itera sobre todas as peças da equipe verde (greenPieces) e também chama o método ResetPiece(p) para restaurar as peças à suas posições iniciais.
		Em resumo, o método ResetBoard() é crucial para reiniciar o estado do jogo, removendo todas as peças do tabuleiro e restaurando-as às suas posições iniciais, preparando o jogo para um novo início.
		

	void ResetPiece(Piece piece){
           if(!piece.gameObject.activeSelf)
               return;
           Vector2Int pos = new Vector2Int((int)piece.transform.position.x, (int)piece.transform.position.y);
           tiles.TryGetValue(pos, out piece.tile);
           piece.tile.content = piece;
   	}
		//O método ResetPiece(Piece piece) é chamado pelo método ResetBoard() para reiniciar uma peça específica. 
		if(!piece.gameObject.activeSelf) return;: Esta linha verifica se o objeto ao qual a peça está vinculada não está ativo (ou seja, não está visível no jogo). Se não estiver ativo, o método retorna imediatamente
		Vector2Int pos = new Vector2Int((int)piece.transform.position.x, (int)piece.transform.position.y);: Aqui, é criado um objeto Vector2Int com as coordenadas inteiras da posição da peça no momento da chamada do método ResetPiece(). Isso é usado para determinar a posição correta da peça no tabuleiro.
		tiles.TryGetValue(pos, out piece.tile);: Esta linha tenta obter a casa (Tile) correspondente à posição da peça no tabuleiro a partir do dicionário tiles. Se a casa for encontrada, ela é armazenada na variável piece.tile.
		piece.tile.content = piece;: Finalmente, o conteúdo da casa (Tile) é definido como a própria peça, atualizando a referência da peça na casa onde ela está localizada no tabuleiro.
		Em resumo, o método ResetPiece(Piece piece) garante que uma peça seja restaurada à sua posição inicial no tabuleiro, verificando se ela está ativa, obtendo a posição correta no tabuleiro e atualizando a referência da peça na casa correspondente. Isso é importante para garantir a consistência e a correta inicialização do estado do jogo ao reiniciar.

	void GetTeams()
	{
   	 goldPieces.AddRange(goldHolder.GetComponentsInChildren<Piece>());
  	 greenPieces.AddRange(greenHolder.GetComponentsInChildren<Piece>());
	}
	
		//O método GetTeams() é responsável por obter as peças dos jogadores a partir dos transformadores dos jogadores e adicioná-las às listas goldPieces e greenPieces. Vamos analisar o código dentro deste método:
		goldPieces.AddRange(goldHolder.GetComponentsInChildren<Piece>());: Esta linha obtém todos os componentes Piece que estão nos filhos do transformador goldHolder (provavelmente associado ao jogador 1) e adiciona essas peças à lista goldPieces
		greenPieces.AddRange(greenHolder.GetComponentsInChildren<Piece>());: Da mesma forma, esta linha obtém todos os componentes Piece que estão nos filhos do transformador greenHolder (provavelmente associado ao jogador 2) e adiciona essas peças à lista greenPieces.
		Em resumo, o método GetTeams() é responsável por reunir as peças de cada equipe (ouro e verde) a partir dos transformadores dos jogadores e organizá-las nas listas correspondentes. Isso é fundamental para o gerenciamento das peças durante o jogo e a interação com o tabuleiro.
	
	public void CreateBoard(){
       	 for(int i=0; i<8; i++){
         for(int j=0; j<8; j++){
           CreateTile(i, j);
          }}
        }

		//método CreateBoard() é responsável por criar o tabuleiro de xadrez, gerando todas as casas (Tile) necessárias para representar as posições do jogo. Vamos analisar o código dentro deste método:
		for(int i=0; i<8; i++) {: Este loop for externo itera pelas linhas do tabuleiro (de 0 a 7, totalizando 8 linhas).
		for(int j=0; j<8; j++) {: Dentro do loop externo, há um loop for interno que itera pelas colunas do tabuleiro (de 0 a 7, totalizando 8 colunas).
		reateTile(i, j);: Para cada posição (i, j) no tabuleiro, este método chama o método CreateTile() para criar uma nova casa (Tile) e adicioná-la ao tabuleiro.
		método CreateBoard() utiliza dois loops for para criar todas as casas necessárias para representar um tabuleiro de xadrez padrão de 8x8. Cada iteração do loop cria uma nova casa chamando o método CreateTile() com as coordenadas (i, j) correspondentes à posição no tabuleiro. Essa é uma abordagem comum para criar estruturas tabulares como um tabuleiro de xadrez.
	
	void CreateTile(int i, int j){
     	   Tile tile = new Tile();
     	   tile.pos = new Vector2Int(i, j);
     	   tiles.Add(tile.pos, tile);
  	  }
	}

		//O método CreateTile(int i, int j) é responsável por criar uma nova casa (Tile) no tabuleiro de xadrez. Vamos analisar o código dentro deste método:
		Tile tile = new Tile();: Cria um novo objeto Tile, que provavelmente é uma classe ou estrutura que representa uma casa no tabuleiro de xadrez.
		tile.pos = new Vector2Int(i, j);: Define a posição (pos) da casa como um novo objeto Vector2Int com as coordenadas (i, j) passadas como parâmetros para o método. Isso associa a casa à sua posição específica no tabuleiro.
		tiles.Add(tile.pos, tile);: Adiciona a casa ao dicionário tiles, usando sua posição como chave e o objeto Tile como valor. Isso permite acessar rapidamente uma casa específica no tabuleiro com base em suas coordenadas.
		Em resumo, o método CreateTile(int i, int j) cria uma nova casa no tabuleiro de xadrez e a associa à sua posição específica no tabuleiro, adicionando-a ao dicionário tiles para posterior acesso e manipulação durante o jogo. Essa abordagem é comum ao criar estruturas de dados para representar tabuleiros em jogos de tabuleiro.


	







+ Highlights.cs 

	Este script é responsável por gerenciar os destaques no tabuleiro de xadrez, destacando os tiles disponíveis para movimento e deselecionando-os conforme necessário.



	public static Highlights instance;: Define uma instância estática da classe Highlights para facilitar o acesso a partir de outros scripts.
	public SpriteRenderer highlightsPrefab;: Referência ao prefab de SpriteRenderer usado para criar os destaques no tabuleiro.
	Queue<SpriteRenderer> activeHighlights = new Queue<SpriteRenderer>();: Fila para armazenar os destaques ativos no tabuleiro.
	Queue<SpriteRenderer> onReserve = new Queue<SpriteRenderer>();: Fila para armazenar os destaques em reserva, que podem ser reutilizados.

	void Awake() { instance = this; }: Define a instância atual como a instância estática quando o objeto é inicializado.

	public void SelectTiles(List<AvailableMove> availableMoves) { ... }: Método para selecionar e destacar os tiles disponíveis para movimento. Ele itera sobre a lista de movimentos disponíveis, cria novos destaques se necessário, configura sua posição, cor e evento de clique, e os adiciona à fila de destaques ativos.

	public void DeSelectTiles() { ... }: Método para deselecionar e ocultar os destaques ativos no tabuleiro. Ele esvazia a fila de destaques ativos, ocultando-os e movendo-os de volta para a fila de reserva.

	void CreateHighlight() { ... }: Método para criar um novo destaque a partir do prefab highlightsPrefab e adicioná-lo à fila de reserva.




+Player.cs 

	Este script permite definir a cor do jogador e se ele é controlado pela IA ou não. Essas propriedades são úteis para diferenciar os jogadores no jogo de xadrez e determinar como eles serão controlados durante a partida.

	public class Player : MonoBehaviour
	{
   	  public Color color; // Cor do jogador
    	  public bool AIControlled; // Se o jogador é controlado pela IA
	}




+king.cs 

	Este script herda funcionalidades da classe Piece e sobrescreve o método Start() para configurar o movimento específico do Rei utilizando a classe KingMovement. Além disso, ele implementa o método CreateAffected() para criar uma peça afetada, como o Rei e a Torre, para o movimento do Roque.

	public class King : Piece
	{
   	  protected override void Start()
   	  {
    	    base.Start();
    	    movement = new KingMovement(maxTeam); // Configura o movimento específico do Rei
   	  }
	
	//O código fornecido mostra a classe King herdando da classe Piece e substituindo o método Start() para configurar o movimento específico do Rei utilizando a classe KingMovement. Essa é uma abordagem comum em jogos de xadrez, onde cada tipo de peça (Rei, Rainha, Torre, etc.) tem seu próprio comportamento de movimento.


  	  public override AffectedPiece CreateAffected()
  	  {
   	    AffectedKingRook aff = new AffectedKingRook();
    	    aff.wasMoved = wasMoved;
     	    return aff;
   	  }

	
	O método CreateAffected() na classe King é responsável por criar uma peça afetada específica para o movimento do Rei, especialmente para o movimento do Roque.

	ffectedKingRook aff = new AffectedKingRook();: Cria uma nova instância da classe AffectedKingRook, que provavelmente é uma classe que representa uma peça afetada, no caso, o Rei e a Torre para o movimento do Roque.

	aff.wasMoved = wasMoved;: Atribui o estado de movimento (wasMoved) do Rei à peça afetada. Isso pode ser importante para determinar se o movimento do Roque é possível, pois depende de o Rei e a Torre não terem se movido anteriormente.

	return aff;: Retorna a instância da peça afetada aff.

	//Este método é crucial para o funcionamento correto do movimento do Roque no jogo de xadrez, garantindo que a peça afetada seja corretamente configurada para refletir o estado do jogo.


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class KingMovement : Movement
{
    public KingMovement(bool maxTeam)
    {
        value = 100000; // Valor da peça para avaliação do algoritmo de IA
        if (maxTeam)
            positionValue = AIController.instance.squareTable.kingGold; // Valor da posição no tabuleiro para a IA (time dourado)
        else
            positionValue = AIController.instance.squareTable.kingGreen; // Valor da posição no tabuleiro para a IA (time verde)
    }

    public override List<AvailableMove> GetValidMoves()
    {
        List<AvailableMove> moves = new List<AvailableMove>();

        // Movimento horizontal para frente e para trás
        UntilBlockedPath(moves, new Vector2Int(1, 0), true, 1);
        UntilBlockedPath(moves, new Vector2Int(-1, 0), true, 1);
        // Movimento vertical para frente e para trás
        UntilBlockedPath(moves, new Vector2Int(0, 1), true, 1);
        UntilBlockedPath(moves, new Vector2Int(0, -1), true, 1);
        // Movimento diagonal para frente e para a direita
        UntilBlockedPath(moves, new Vector2Int(1, 1), true, 1);
        // Movimento diagonal para frente e para a esquerda
        UntilBlockedPath(moves, new Vector2Int(1, -1), true, 1);
        // Movimento diagonal para trás e para a esquerda
        UntilBlockedPath(moves, new Vector2Int(-1, -1), true, 1);
        // Movimento diagonal para trás e para a direita
        UntilBlockedPath(moves, new Vector2Int(-1, 1), true, 1);

        Castling(moves); // Adiciona movimento de Roque aos movimentos válidos do Rei

        return moves;
    }

    void Castling(List<AvailableMove> moves)
    {
        if (Board.instance.selectedPiece.wasMoved) // Verifica se o Rei já se moveu anteriormente
            return;

        // Verifica o movimento de Roque para a direita (Roque pequeno)
        Tile temp = CheckRook(new Vector2Int(1, 0));
        if (temp != null)
        {
            moves.Add(new AvailableMove(temp.pos, MoveType.Castling)); // Adiciona o movimento de Roque à lista de movimentos válidos
        }
        // Verifica o movimento de Roque para a esquerda (Roque grande)
        temp = CheckRook(new Vector2Int(-1, 0));
        if (temp != null)
        {
            moves.Add(new AvailableMove(temp.pos, MoveType.Castling)); // Adiciona o movimento de Roque à lista de movimentos válidos
        }

        return;
    }

    Tile CheckRook(Vector2Int direction)
    {
        Rook rook;
        Tile currentTile = GetTile(Board.instance.selectedPiece.tile.pos + direction); // Obtém a próxima posição no tabuleiro

        while (currentTile != null)
        {
            if (currentTile.content != null)
                break;
            currentTile = GetTile(currentTile.pos + direction); // Move para a próxima posição na direção especificada
        }

        if (currentTile == null)
            return null;

        rook = currentTile.content as Rook; // Verifica se a peça na posição é uma Torre
        if (rook == null || rook.wasMoved) // Se não for uma Torre ou a Torre já se moveu, retorna null
            return null;

        return rook.tile; // Retorna o tile da Torre válida para o movimento de Roque
    }
}


Este script herda funcionalidades da classe Movement e implementa o método GetValidMoves(), que determina os movimentos válidos para o Rei no jogo de xadrez, incluindo a lógica para o movimento de Roque. O método Castling() verifica se o Rei pode realizar o movimento de Roque pequeno (para a direita) ou grande (para a esquerda) e adiciona esses movimentos à lista de movimentos válidos.












+ Queen

	Aqui está o código do script Queen.cs, que pertence ao objeto filho Queen do objeto GoldPieces e configura o movimento específico para a Rainha no jogo de xadrez:

	public class Queen : Piece
	 {
  	   protected override void Start()
   	   {
   	     base.Start();
    	     movement = new QueenMovement(maxTeam); // Configura o movimento específico da Rainha
   	   }
	 }

	Este script herda funcionalidades da classe Piece e sobrescreve o método Start() para configurar o movimento específico da Rainha utilizando a classe QueenMovement. Isso permite que a Rainha se mova de acordo com as regras do xadrez para essa peça específica.

QueenMovement.cs

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class QueenMovement : Movement
{
    public QueenMovement(bool maxTeam)
    {
        value = 900; // Valor da peça para avaliação do algoritmo de IA
        if (maxTeam)
            positionValue = AIController.instance.squareTable.queenGold; // Valor da posição no tabuleiro para a IA (time dourado)
        else
            positionValue = AIController.instance.squareTable.queenGreen; // Valor da posição no tabuleiro para a IA (time verde)
    }

    public override List<AvailableMove> GetValidMoves()
    {
        List<AvailableMove> moves = new List<AvailableMove>();

        // Movimento horizontal para frente e para trás
        UntilBlockedPath(moves, new Vector2Int(1, 0), true, 99);
        UntilBlockedPath(moves, new Vector2Int(-1, 0), true, 99);
        // Movimento vert








+bispo 

public class Bishop : Piece
{
    protected override void Start()
    {
        base.Start();
        movement = new BishopMovement(maxTeam); // Configura o movimento específico do Bispo
    }
}


	Este script herda funcionalidades da classe Piece e sobrescreve o método Start() para configurar o movimento específico do Bispo utilizando a classe BishopMovement. Isso permite que o Bispo se mova de acordo com as regras do xadrez para essa peça específica.	


BishopMovement.cs


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BishopMovement : Movement
{
    public BishopMovement(bool maxTeam)
    {
        value = 300; // Valor da peça para avaliação do algoritmo de IA
        if (maxTeam)
            positionValue = AIController.instance.squareTable.bishopGold; // Valor da posição no tabuleiro para a IA (time dourado)
        else
            positionValue = AIController.instance.squareTable.bishopGreen; // Valor da posição no tabuleiro para a IA (time verde)
    }

    public override List<AvailableMove> GetValidMoves()
    {
        List<AvailableMove> moves = new List<AvailableMove>();

        // Movimento diagonal para frente e para a direita
        UntilBlockedPath(moves, new Vector2Int(1, 1), true, 99);
        // Movimento diagonal para frente e para a esquerda
        UntilBlockedPath(moves, new Vector2Int(1, -1), true, 99);
        // Movimento diagonal para trás e para a esquerda
        UntilBlockedPath(moves, new Vector2Int(-1, -1), true, 99);
        // Movimento diagonal para trás e para a direita
        UntilBlockedPath(moves, new Vector2Int(-1, 1), true, 99);

        return moves;
    }
}





+Rook.cs


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Rook : Piece
{
    protected override void Start()
    {
        base.Start();
        movement = new RookMovement(maxTeam); // Configura o movimento específico da Torre
    }

    public override AffectedPiece CreateAffected()
    {
        AffectedKingRook aff = new AffectedKingRook();
        aff.wasMoved = wasMoved;
        return aff;
    }
}


Este script herda funcionalidades da classe Piece e sobrescreve o método Start() para configurar o movimento específico da Torre utilizando a classe RookMovement. Além disso, ele implementa o método CreateAffected() para criar um objeto que representa o efeito de movimento na Torre, como parte da lógica do jogo.





RookMovement.cs

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class RookMovement : Movement
{
    public RookMovement(bool maxTeam)
    {
        value = 500; // Valor da peça para avaliação do algoritmo de IA
        if (maxTeam)
            positionValue = AIController.instance.squareTable.rookGold; // Valor da posição no tabuleiro para a IA (time dourado)
        else
            positionValue = AIController.instance.squareTable.rookGreen; // Valor da posição no tabuleiro para a IA (time verde)
    }

    public override List<AvailableMove> GetValidMoves()
    {
        List<AvailableMove> moves = new List<AvailableMove>();

        // Movimento horizontal para frente e para trás
        UntilBlockedPath(moves, new Vector2Int(1, 0), true, 99);
        UntilBlockedPath(moves, new Vector2Int(-1, 0), true, 99);
        // Movimento vertical para frente e para trás
        UntilBlockedPath(moves, new Vector2Int(0, 1), true, 99);
        UntilBlockedPath(moves, new Vector2Int(0, -1), true, 99);

        return moves;
    }
}






+Pawn.cs


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Pawn : Piece
{
    public Movement savedMovement; // Movimento padrão do Peão
    public Movement queenMovement; // Movimento da Rainha (para promoção)
    public Movement knightMovement; // Movimento do Cavalo (para promoção)

    protected override void Start()
    {
        base.Start();
        movement = savedMovement = new PawnMovement(maxTeam); // Configura o movimento padrão do Peão
        queenMovement = new QueenMovement(maxTeam); // Configura o movimento da Rainha para promoção
        knightMovement = new KnightMovement(maxTeam); // Configura o movimento do Cavalo para promoção
    }

    public override AffectedPiece CreateAffected()
    {
        AffectedPawn aff = new AffectedPawn();
        aff.wasMoved = wasMoved;
        return aff;
    }
}

Este script herda funcionalidades da classe Piece e define o comportamento do Peão no jogo de xadrez. Ele também inclui movimentos adicionais para promoção do Peão, permitindo que ele se torne uma Rainha ou um Cavalo após alcançar a última fileira do tabuleiro.



using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PawnMovement : Movement
{
    Vector2Int direction; // Direção do movimento do Peão (para frente)
    int promotionHeight; // Altura na qual o Peão pode ser promovido
    public PawnMovement(bool maxTeam)
    {
        if (maxTeam)
        {
            direction = new Vector2Int(0, 1); // Movimento para frente para o time dourado
            promotionHeight = 7; // Altura de promoção para o time dourado
            positionValue = AIController.instance.squareTable.pawnGold; // Valor da posição no tabuleiro para a IA (time dourado)
        }
        else
        {
            direction = new Vector2Int(0, -1); // Movimento para frente para o time verde
            promotionHeight = 0; // Altura de promoção para o time verde
            positionValue = AIController.instance.squareTable.pawnGreen; // Valor da posição no tabuleiro para a IA (time verde)
        }
        value = 100; // Valor da peça para avaliação do algoritmo de IA
    }

    public override List<AvailableMove> GetValidMoves()
    {
        List<AvailableMove> moveable = new List<AvailableMove>();
        List<AvailableMove> moves = new List<AvailableMove>();
        GetPawnAttack(moveable); // Adiciona movimentos de ataque ao Peão

        if (!Board.instance.selectedPiece.wasMoved) // Se o Peão ainda não se moveu
        {
            UntilBlockedPath(moves, direction, false, 2); // Movimento duplo inicial
            if (moves.Count == 2)
                moves[1] = new AvailableMove(moves[1].pos, MoveType.PawnDoubleMove); // Define o tipo de movimento duplo inicial
        }
        else
        {
            UntilBlockedPath(moves, direction, false, 1); // Movimento simples
            if (moves.Count > 0)
                moves[0] = CheckPromotion(moves[0]); // Verifica se é possível promover o Peão
        }
        moveable.AddRange(moves);

        return moveable;
    }

    void GetPawnAttack(List<AvailableMove> pawnAttack)
    {
        Piece piece = Board.instance.selectedPiece;
        Vector2Int leftPos = new Vector2Int(piece.tile.pos.x - 1, piece.tile.pos.y + direction.y); // Posição do ataque à esquerda
        Vector2Int rightPos = new Vector2Int(piece.tile.pos.x + 1, piece.tile.pos.y + direction.y); // Posição do ataque à direita

        GetPawnAttack(GetTile(leftPos), pawnAttack); // Adiciona ataque à esquerda
        GetPawnAttack(GetTile(rightPos), pawnAttack); // Adiciona ataque à direita
    }

    void GetPawnAttack(Tile tile, List<AvailableMove> pawnAttack)
    {
        if (tile == null)
            return;
        if (IsEnemy(tile)) // Se a peça é um inimigo, é possível atacar
        {
            pawnAttack.Add(new AvailableMove(tile.pos, MoveType.Normal)); // Adiciona movimento de ataque normal
        }
        else if (PieceMovementState.enPassantFlag.moveType == MoveType.EnPassant && PieceMovementState.enPassantFlag.pos == tile.pos)
        {
            pawnAttack.Add(new AvailableMove(tile.pos, MoveType.EnPassant)); // Adiciona movimento de en passant se disponível
        }
    }

    AvailableMove CheckPromotion(AvailableMove availableMove)
    {
        if (availableMove.pos.y != promotionHeight) // Verifica se o Peão chegou à altura de promoção
            return availableMove;
        return new AvailableMove(availableMove.pos, MoveType.Promotion); // Define o tipo de movimento como promoção


Este script herda funcionalidades da classe Movement e define o comportamento específico do movimento do Peão no jogo de xadrez, incluindo movimentos de ataque, movimento duplo inicial, promoção e movimentos especiais como o en passant.






+Knight .cs

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Knight : Piece
{
   protected override void Start(){
        base.Start();
        movement = new KnightMovement(maxTeam);
    }
}



using System.Collections;: Esta linha importa o namespace System.Collections, que contém classes e interfaces para manipulação de coleções de objetos.

using System.Collections.Generic;: Aqui, o namespace System.Collections.Generic é importado. Ele fornece classes genéricas, como listas, dicionários e conjuntos, para armazenar e manipular coleções de objetos.

using UnityEngine;: Este namespace é usado em Unity e fornece acesso a classes e funcionalidades específicas do mecanismo Unity, como componentes, física e renderização.

public class Knight : Piece: Aqui, uma classe chamada Knight é definida e declara que ela é uma subclasse de Piece. Isso significa que Knight herda todos os membros (métodos, propriedades, campos) de Piece e pode adicionar comportamentos específicos para um cavalo no jogo.

protected override void Start() { }: Este é um método de inicialização especial em Unity que é chamado quando o objeto é instanciado. O modificador protected significa que o método só pode ser acessado por classes derivadas (subclasses). O modificador override indica que esse método está substituindo o método Start da classe base Piece.

base.Start();: Esta linha chama o método Start da classe base Piece. É comum chamar o método da classe base ao substituir métodos em classes derivadas para garantir que o comportamento da classe base também seja executado.

movement = new KnightMovement(maxTeam);: Aqui, um novo objeto KnightMovement é criado e atribuído à variável movement. O construtor KnightMovement(maxTeam) pode estar inicializando o comportamento de movimento específico do cavalo, talvez definindo as regras de movimento para o cavalo com base no time (maxTeam).

Este código é uma estrutura básica para implementar o comportamento de um cavalo (Knight) em um jogo de xadrez dentro do Unity, onde Piece provavelmente é uma classe base que define comportamentos genéricos de peças de xadrez, e KnightMovement é uma classe responsável por determinar como o cavalo se move no tabuleiro.



KnightMovement.cs

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class KnightMovement : Movement
{
    // Construtor da classe KnightMovement
    public KnightMovement(bool maxTeam)
    {
        // Define o valor do cavalo como 300
        value = 300;
        
        // Define o valor de posição com base no time do cavalo
        if (maxTeam)
            positionValue = AIController.instance.squareTable.knightGold; // Time máximo
        else
            positionValue = AIController.instance.squareTable.knightGreen; // Time não máximo
    }

    // Método para obter os movimentos válidos do cavalo
    public override List<AvailableMove> GetValidMoves()
    {
        // Lista de movimentos válidos
        List<AvailableMove> moves = new List<AvailableMove>();

        // Adiciona os movimentos em forma de L em diferentes direções à lista de movimentos válidos
        moves.AddRange(GetLMovement(new Vector2Int(0, 1))); // Movimento vertical positivo
        moves.AddRange(GetLMovement(new Vector2Int(0, -1))); // Movimento vertical negativo
        moves.AddRange(GetLMovement(new Vector2Int(1, 0))); // Movimento horizontal positivo
        moves.AddRange(GetLMovement(new Vector2Int(-1, 0))); // Movimento horizontal negativo

        // Retorna a lista de movimentos válidos
        return moves;
    }

    // Método para calcular os movimentos em forma de L em uma direção específica
    List<AvailableMove> GetLMovement(Vector2Int direction)
    {
        // Lista de movimentos em forma de L
        List<AvailableMove> moves = new List<AvailableMove>();

        // Obtém a posição atual do cavalo no tabuleiro
        Tile current = Board.instance.selectedPiece.tile;

        // Obtém a posição duas casas à frente na direção especificada
        Tile temp = GetTile(current.pos + direction * 2);

        // Se a posição existe (não é nula), calcula a parte curva do movimento em forma de L
        if (temp != null)
        {
            moves.AddRange(GetCurvedPart(temp.pos, new Vector2Int(direction.y, direction.x)));
        }

        // Retorna a lista de movimentos em forma de L
        return moves;
    }

    // Método para calcular a parte curva do movimento em forma de L
    List<AvailableMove> GetCurvedPart(Vector2Int pos, Vector2Int direction)
    {
        // Lista de movimentos disponíveis na parte curva do movimento em forma de L
        List<AvailableMove> availableMoves = new List<AvailableMove>();

        // Obtém a primeira casa na parte curva do movimento
        Tile tile1 = GetTile(pos + direction);

        // Obtém a segunda casa na parte curva do movimento
        Tile tile2 = GetTile(pos - direction);

        // Verifica se as casas são válidas (não nulas) e se estão vazias ou contêm peças do time adversário
        if (tile1 != null && (tile1.content == null || IsEnemy(tile1)))
            availableMoves.Add(new AvailableMove(tile1.pos));

        if (tile2 != null && (tile2.content == null || IsEnemy(tile2)))
            availableMoves.Add(new AvailableMove(tile2.pos));

        // Retorna a lista de movimentos disponíveis na parte curva do movimento em forma de L
        return availableMoves;
    }
}
















+statemachine gameoject



using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Threading.Tasks;

public class StateMachineController : MonoBehaviour
{
    public static StateMachineController instance; // Referência estática para permitir acesso de outros scripts

    public Player player1; // Referência ao jogador 1
    public Player player2; // Referência ao jogador 2
    public Player currentlyPlaying; // Referência ao jogador atualmente jogando
    public TaskCompletionSource<object> taskHold; // Tarefa de conclusão de operação assíncrona
    public GameObject promotionPanel; // Painel de promoção de peão
    State _current; // Estado atual da máquina de estados
    bool busy; // Indica se a máquina de estados está ocupada

    void Awake()
    {
        instance = this; // Configuração da referência estática ao iniciar o objeto
    }

    void Start()
    {
        ChangeTo<LoadState>(); // Inicia o jogo mudando para o estado de carregamento
    }

    // Método para mudar para um estado específico
    public void ChangeTo<T>() where T : State
    {
        State state = GetState<T>(); // Obtém o estado desejado
        if (_current != state) // Verifica se o estado atual é diferente do estado desejado
            ChangeState(state); // Realiza a mudança de estado
    }

    // Método para obter um estado existente ou criar um novo se não existir
    public T GetState<T>() where T : State
    {
        T target = GetComponent<T>(); // Tenta obter o componente do tipo T
        if (target == null) // Se o componente não existir
            target = gameObject.AddComponent<T>(); // Adiciona o componente ao GameObject
        return target; // Retorna o estado obtido ou criado
    }

    // Método para realizar a mudança de estado
    void ChangeState(State value)
    {
        if (busy) // Verifica se a máquina de estados está ocupada
            return; // Se estiver ocupada, não realiza a mudança de estado
        busy = true; // Marca a máquina de estados como ocupada

        if (_current != null) // Verifica se existe um estado atual
            _current.Exit(); // Se existir, chama o método de saída do estado atual

        _current = value; // Define o novo estado como estado atual
        if (_current != null) // Verifica se o novo estado não é nulo
            _current.Enter(); // Se não for nulo, chama o método de entrada do novo estado

        busy = false; // Marca a máquina de estados como não ocupada
    }
}







